{"version":3,"sources":["logo_name.png","idbService.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["STORE_NAMES","queue","keyPathMap","openIndexedDB","storeName","openDB","upgrade","upgradeDb","console","warn","storeNameList","Object","values","Array","from","objectStoreNames","forEach","existsStoreName","includes","deleteObjectStore","initStoreName","contains","createObjectStore","keyPath","error","action","method","data","a","db","tx","transaction","objectStore","complete","put","remove","getItemsList","then","getAll","api","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","borderRadius","boxShadow","shadows","padding","spacing","transform","left","top","uploadItem","formData","fetch","body","headers","origin","Items","items","apiItems","length","renderItem","isPending","id","power","water","gas","outlets","gfc","img","className","src","URL","createObjectURL","alt","style","fontSize","color","marginTop","display","right","bottom","CircularProgress","size","flexWrap","slice","reverse","map","App","useState","window","navigator","onLine","online","setOnline","setItems","setApiItems","loading","setLoading","updateRoot","IDB","loadItemsFromApi","r","json","catch","finally","onOffline","onOnline","i","FormData","append","entries","key","value","set","useEffect","addEventListener","modal","classes","React","open","setOpen","setImg","handleClose","blob","onSubmit","e","preventDefault","target","elements","Date","now","checked","FormControlLabel","control","Switch","name","label","type","multiple","accept","onChange","files","htmlFor","Button","variant","component","marginLeft","disabled","onClick","Modal","onClose","aria-labelledby","aria-describedby","useModal","logo","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process","href","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7069982e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo_name.5b93b3e6.png\";","import { openDB } from 'idb'\r\nconst BASE_NAME = 'dev'\r\nconst dbVersion = 2\r\n\r\n// key should match the value, renaming both it's ok\r\nexport const STORE_NAMES = {\r\n  queue: 'queue',\r\n}\r\n\r\nconst keyPathMap = {\r\n  [STORE_NAMES.queue]: 'id',\r\n}\r\n\r\nconst openIndexedDB = storeName => openDB(BASE_NAME, dbVersion, {\r\n  upgrade (upgradeDb) {\r\n    console.warn('upgrade db, version', dbVersion)\r\n    if (!STORE_NAMES[storeName]) {\r\n      console.error('Store name does not exists! Please, use store name from STORE_NAMES', { STORE_NAMES, storeName })\r\n      return\r\n    }\r\n\r\n    const storeNameList = Object.values(STORE_NAMES)\r\n\r\n    const existsStoreNameList = Array.from(upgradeDb.objectStoreNames)\r\n    existsStoreNameList.forEach(existsStoreName => {\r\n      if (!storeNameList.includes(existsStoreName)) {\r\n        upgradeDb.deleteObjectStore(existsStoreName)\r\n      }\r\n    })\r\n\r\n    storeNameList.forEach(initStoreName => {\r\n      if (!upgradeDb.objectStoreNames.contains(initStoreName)) {\r\n        upgradeDb.createObjectStore(initStoreName, { keyPath: keyPathMap[initStoreName] || 'id' })\r\n      }\r\n    })\r\n  },\r\n})\r\n\r\nconst action = method => async (storeName, data) => {\r\n  const db = await openIndexedDB(storeName)\r\n  const tx = db.transaction(storeName, 'readwrite')\r\n  const store = tx.objectStore(storeName)\r\n  store[method](data)\r\n  return tx.complete\r\n}\r\n\r\nexport const put = action('put')\r\nexport const remove = action('delete')\r\n\r\nexport const getItemsMap = (storeName, valueKey = 'value') => openIndexedDB(storeName) // use it only for simpleValues\r\n  .then(db => db\r\n    .transaction(storeName, 'readonly')\r\n    .objectStore(storeName)\r\n    .getAll(),\r\n  )\r\n  .then(items => items.reduce((acc, { [keyPathMap[storeName]]: keyPath, [valueKey]: value }) => {\r\n    acc[keyPath] = value\r\n    return acc\r\n  }, {}))\r\n\r\nexport const getItemsList = storeName => openIndexedDB(storeName)\r\n  .then(db => db\r\n    .transaction(storeName, 'readonly')\r\n    .objectStore(storeName)\r\n    .getAll(),\r\n  )\r\n","import React, { useEffect, useState } from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nimport logo from './logo_name.png';\n\nimport * as IDB from './idbService';\n\nimport './App.css';\n\n// const api = `http://localhost:5000`;\nconst api = `http://192.168.100.3:5000`;\n// const api = `.`;\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    // border: '2px solid #000',\n    borderRadius: '4px',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    transform: 'translate(-50%, -50%)',\n    left: '50%',\n    top: '50%',\n  },\n}));\n\nconst uploadItem = formData => {\n  return fetch(`${api}/api/upload`, {\n    method: 'POST',\n    body: formData,\n    headers: { origin }\n  })\n}\n\n/* const fetchNewAvatar = ({ updateImage, setLoading }) => fetch('http://localhost:5000/avatar.png')\n  .then(response => response.blob())\n  .then(myBlob => updateImage(URL.createObjectURL(myBlob)))\n  .then(() => setLoading(false))\n\nconst getOnChange = ({ updateImage, setLoading }) => e => {\n  const file = e.target.files[0]\n\n  const formData = new FormData()\n  formData.append('imgToUpload', file)\n\n  e.target.value = '';\n\n  setLoading(true)\n  (file)\n    .then(() => fetchNewAvatar({ updateImage, setLoading }))\n    .catch(() => {\n      setLoading(false)\n      IDB.put(IDB.STORE_NAMES.queue, { id: Date.now(), url: 'http://localhost:5000/api/upload', type: 'img', file })\n    })\n}; */\n\nconst useModal = (updateRoot, setApiItems) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [loading, setLoading] = useState(false);\n  const [img, setImg] = useState(null);\n\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false) || setImg(null) || setLoading(null);\n\n  const onSubmit = e => {\n    e.preventDefault()\n    const {\n      power, water, gas,\n      outlets, gfc,\n      // photo,\n    } = e.target.elements; // checked\n\n    const id = Date.now();\n    const values = {\n      power: !!power.checked,\n      water: !!water.checked,\n      gas: !!gas.checked,\n      outlets: !!outlets.checked,\n      gfc: !!gfc.checked,\n      img,\n    }\n\n    const formData = new FormData()\n    formData.append('imgToUpload', img)\n    formData.set('power', !!power.checked)\n    formData.set('water', !!water.checked)\n    formData.set('gas', !!gas.checked)\n    formData.set('outlets', !!outlets.checked)\n    formData.set('gfc', !!gfc.checked)\n    formData.set('id', id)\n\n    setLoading(true)\n    uploadItem(formData)\n      .then(r => r.json())\n      .then(items => setApiItems(items))\n      .catch(() => {\n        setLoading(false)\n        IDB.put(IDB.STORE_NAMES.queue, { id, values })\n      })\n      .finally(() => handleClose() || updateRoot())\n  }\n\n  const onChange = e => {\n    setImg(e.target.files[0])\n    e.target.value = ''\n  }\n\n  const blob = img && URL.createObjectURL(img)\n\n  const body = (\n    <div className={classes.paper}>\n      <form onSubmit={onSubmit}>\n        <h2 id=\"simple-modal-title\">Add Item</h2>\n        <p className=\"Fields\">Utilities Check</p>\n        <hr/>\n\n        <FormControlLabel control={<Switch name=\"power\" color=\"primary\" />} label=\"Power On\" />\n        <br/>\n        <FormControlLabel control={<Switch name=\"water\" color=\"primary\" />} label=\"Water On\" />\n        <br/>\n        <FormControlLabel control={<Switch name=\"gas\" color=\"primary\" />} label=\"Gas On\" />\n        <br/>\n        <p className=\"Fields\">Electrical</p>\n        <hr/>\n\n        <FormControlLabel control={<Switch name=\"outlets\" color=\"primary\" />} label=\"Outlets Checked\" />\n        <br/>\n        <FormControlLabel control={<Switch name=\"gfc\" color=\"primary\" />} label=\"GFCIs Checked\" />\n\n        <p className=\"Fields\">Photo</p>\n        <hr/>\n        <br/>\n        <input\n          name=\"photo\"\n          className=\"fileI\"\n          type=\"file\"\n          id=\"load\"\n          multiple\n          accept=\"image/jpeg,image/png,image/gif\"\n          onChange={onChange}\n        />\n        {img ? <img src={blob} alt=\"\" className=\"loadImg\" /> : (<label htmlFor=\"load\">\n          <Button variant=\"outlined\" color=\"primary\" component=\"span\">\n            Upload\n          </Button>\n        </label>)}\n\n        {loading\n          ? <CircularProgress size={20} style={{ marginLeft: 'auto', display: 'block', marginTop: '20px' }} />\n          : <Button\n            disabled={loading}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            style={{ marginLeft: 'auto', display: 'block', marginTop: '20px' }}\n          >\n           Save\n        </Button>}\n      </form>\n    </div>\n  );\n\n  return (\n    <div className=\"openModal\">\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleOpen}\n        className=\"buttonAdd\"\n        style={{ marginLeft: 'auto', display: 'block' }}\n      >\n        Add Item\n      </Button>\n      {open && <Modal\n        key={open}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        {body}\n      </Modal>}\n    </div>\n  );\n}\n\nconst Items = ({ items, apiItems }) => {\n  if (!apiItems.length && !items.length) {\n    return 'No results';\n  }\n\n  const renderItem = isPending => ({ id, values: { power, water, gas, outlets, gfc, img } }) => (\n    <div className={`card${isPending ? ' pending' : ''}`} key={id}>\n      <img src={isPending ? URL.createObjectURL(img) : `${api}/${id}.png`} alt=\"\" className=\"ava\" />\n      <div style={{ fontSize: '13px' }}>\n        <b>Utilities Check</b>\n        <hr />\n        <span style={{ color: 'rgba(0,0,0,0.6)' }}>\n          Power: <i>{power ? 'Yes' : 'No'}</i>; Water: <i>{water ? 'Yes' : 'No'}</i>; Gas: <i>{gas ? 'Yes' : 'No'}</i>\n        </span>\n        <br/>\n        <b style={{ marginTop: '4px', display: 'block' }}>Electrical</b>\n        <hr />\n        <span style={{ color: 'rgba(0,0,0,0.6)' }}>Outlets Checked: {outlets ? 'Yes' : 'No'}</span>\n        <br/>\n        <span style={{ color: 'rgba(0,0,0,0.6)' }}>GFCIs Checked: {gfc ? 'Yes' : 'No'}</span>\n      </div>\n      {isPending && <div style={{ position: 'absolute', right: '15px', bottom: '15px' }}><CircularProgress size={10} /></div>}\n    </div>\n  )\n\n  return (\n    <div>\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n        {items.slice().reverse().map(renderItem(true))}\n        {apiItems.slice().reverse().map(({ power, water, gas, outlets, gfc, id }) => ({ id, values: { power, water, gas, outlets, gfc } })).map(renderItem(false))}\n      </div>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [online, setOnline] = useState(window.navigator.onLine);\n  const [items, setItems] = useState([]);\n  const [apiItems, setApiItems] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const updateRoot = () => IDB.getItemsList(IDB.STORE_NAMES.queue).then(setItems);\n\n  const loadItemsFromApi = () => fetch(`${api}/api/items`)\n    .then(r => r.json())\n    .then(setApiItems)\n    .catch(() => setApiItems([]))\n    .finally(() => setLoading(false));\n\n  const onOffline = () => setOnline(false)\n  const onOnline = async () => {\n    setOnline(true);\n\n    await loadItemsFromApi()\n    await updateRoot()\n    IDB.getItemsList(IDB.STORE_NAMES.queue).then(async data => {\n      for (let i = 0; i < data.length; i++) {\n        const { id, values: { img, ...values } } = data[i];\n        const formData = new FormData()\n        formData.append('imgToUpload', img)\n        Object.entries(values).forEach(([key, value]) => { formData.set(key, value) })\n        formData.set('id', id)\n\n        await uploadItem(formData)\n          .then(r => r.json())\n          .then(items => IDB.remove(IDB.STORE_NAMES.queue, id).then(() => updateRoot().then(() => setApiItems(items))))\n      }\n    })\n  }\n\n  useEffect(() => {\n    window.navigator.onLine && onOnline();\n\n    loadItemsFromApi()\n\n    window.addEventListener('online', onOnline);\n    window.addEventListener('offline', onOffline);\n  }, []);\n\n  const modal = useModal(updateRoot, setApiItems);\n\n  return (\n    <div className=\"App\">\n      <div className=\"leftSide\">\n        <img src={logo} alt=\"\" className=\"logo\"/>\n      </div>\n      <div className=\"rightSide\">\n        <div className={online ? 'Online' : 'Offline'}>{online ? 'Online' : 'Offline'}</div>\n        {modal}\n        {loading ? <CircularProgress size={20} /> : <Items items={items} apiItems={apiItems} />}\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}